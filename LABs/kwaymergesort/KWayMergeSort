package kwaymergesort;

import java.util.Arrays;

import timing.Ticker;

public class KWayMergeSort {

	/**
	 * 
	 * @param K some positive power of 2.
	 * @param input an array of unsorted integers.  Its size is either 1, or some other power of 2 that is at least K
	 * @param ticker call .tick() on this to account for the work you do
	 * @return
	 */
	public static Integer[] kwaymergesort(int K, Integer[] input, Ticker ticker) {
		int n = input.length;
		//
		// FIXME
		// Following just copies the input as the answer
		//
		// You must replace the loop below with code that performs
		// a K-way merge sort, placing the result in ans
		//
		// The web page for this assignment provides more detail.
		//
		// Use the ticker as you normally would, to account for
		// the operations taken to perform the K-way merge sort.
		//
		Integer[] ans = new Integer[n];
		if(n < 2){
			return input;
		} else{
			Integer[][] tmp = new Integer[K][n/K];
			ticker.tick();
			int i = 0;
			while(i < n){
				tmp[i/(n/K)][i%(n/K)] = input[i];
				ticker.tick();
				i++;
			}
			int j = 0;
			while(j < K){
				tmp[j] = kwaymergesort(K, tmp[j], ticker);
				ticker.tick();
				j++;
			}
			ans = merge(tmp, ticker);
			ticker.tick();
		}

		return ans;
	}

	public static Integer[] merge(Integer[][] parts, Ticker ticker){
		int K = parts.length;
		int N = parts[0].length;
		// for each subarray, the following array points at 
		// the first number in the array that hasn't been added
		// to the final array yet.
		int[] pt = new int[K];
		Integer[] merged = new Integer[K * N];
		ticker.tick(4);
		for(int p = 0; p < K * N; p++){
			int minPosition = 0;
			int minimum = Integer.MAX_VALUE;
			ticker.tick(2);
			int i = 0;
			while (i < K){
				ticker.tick();
				if (pt[i] < N && parts[i][pt[i]] < minimum){
					minimum = parts[i][pt[i]];
					minPosition = i;
					ticker.tick(2);
				} 
				i++;
			}
			pt[minPosition]++;            
			merged[p] = minimum;
			ticker.tick(3);
		}
		return merged;
	}

}
